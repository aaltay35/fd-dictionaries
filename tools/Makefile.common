toolsdir := $(FREEDICTDIR)/tools
include $(toolsdir)/Makefile.config

#######################
#### set some variables
#######################

# let the tools from $(toolsdir) override tools
# from /usr/bin
PATH := $(toolsdir):$(PATH)

# that might need adaptation, standard debian ships with dash these days and people might not have bash at all
SHELL=bash
ifeq ($(origin UNSUPPORTED_PLATFORMS), undefined)
UNSUPPORTED_PLATFORMS = bedic evolutionary
endif


available_platforms := dictd stardict aspell d4m fo

xsldir ?= $(toolsdir)/xsl
tei2dict := xmltei2xmldict.pl -n $(NSGMLS) -d $(XMLDECLARATION)
xmllint := /usr/bin/xmllint

dictname ?= $(shell basename "$(shell pwd)")
rdictname := $(shell export V=$(dictname); echo $${V:4:3}-$${V:0:3})

DICTD_RESTART_SCRIPT = $(BUILDHELPERS_DIR)dict_restart_helper.sh

# Extracting the tiny edition element contents per XSLT is
# inefficient. Use grep instead.
# if $(version) contains spaces:
# Makefile.common:235: *** mixed implicit and normal rules.  Stop.
# so spaces are substituted by underscores
empty:=
space:= $(empty) $(empty)
version1 := $(shell sed -e '100q;/<edition>/!d;s/.*<edition>\(.*\)<\/edition>.*/\1/;q'\
	   $(wildcard $(dictname).tei*) $(dictname)-nophon.tei)
version := $(subst $(space),_,$(version1))

################
# default target
################

#	-$(MAKE) release-aspell
#	-$(MAKE) release-d4m
#	-$(MAKE) release-fo

# Please note: the "all" target has been significantly reduced to enable the
# release of FreeDict tools in a relatively problem-free state.
# You are more than welcome to help out in the process of re-instituting
# the above targets; please drop us a line at freedict-beta.

all:
	$(MAKE) dist
	$(MAKE) release-dict-tbz2
	$(MAKE) release-stardict


##################################################
#### targets to extract information from TEI files
##################################################

# no newline, so output is equal to the output of
# xsl/getedition.xsl / xsl/getstaus.xsl
version: $(dictname).tei
	@echo -n "$(version)"

# alternative: @$(XSLTPROCESSOR) $(xsldir)/getstatus.xsl $(dictname).tei
status: $(dictname).tei
	@echo -n "$(shell grep -m 1 -o -P -e \
	"(?<=<note type=\"status\">).+(?=</note>)" $(dictname).tei)"

sourceURL: $(dictname).tei
	@echo -n $(shell grep -m 1 -o -P -e \
	"(?<=<xptr url=\")|(?<=<ptr target=\").+(?=\"\/>)" $(dictname).tei)

maintainer: $(dictname).tei $(xsldir)/getmaintainer.xsl
	@$(XSLTPROCESSOR) $(xsldir)/getmaintainer.xsl $<


find-homographs: $(dictname).tei
	@cat $< | grep orth | \
	sed -e s:'          <orth>':'':g -e s:'<\/orth>':'':g | sort -f | \
	uniq -i -d

# prints what was used as Part-Of-Speech <pos> element content
# with a number stating how often it was used
pos-statistics: $(dictname).tei
	grep -o "<pos>.*</pos>" $< | perl -pi -e 's/<pos>(.*)<\/pos>/$$1/;' | sort | uniq -c

###################################################
#### create directories where release files are put
###################################################

dirs:
	@if [ ! -d $(FREEDICTDIR)/release/dict-tgz ]; then \
		mkdir $(FREEDICTDIR)/release/dict-tgz; fi
	@if [ ! -d $(FREEDICTDIR)/release/dict-tbz2 ]; then \
		mkdir $(FREEDICTDIR)/release/dict-tbz2; fi

%.dz: %
	dictzip -k $<

%.tar.gz: %.dict.dz %.index
	tar czf $*.tar.gz $*.dict.dz $*.index

%.tar.bz2: %.dict.dz %.index
	tar cjf $*.tar.bz2 $*.dict.dz $*.index

######################################################################
#### targets for c5/dictfmt conversion style into dict database format
######################################################################

$(dictname).c5: $(dictname).tei $(xsldir)/tei2c5.xsl \
	$(xsldir)/inc/teientry2txt.xsl \
	$(xsldir)/inc/teiheader2txt.xsl \
	$(xsldir)/inc/indent.xsl
	if [ "$(firstword $(XSLTPROCESSOR))" == "xsltproc" ]; then \
	  $(XSLTPROCESSOR) --xinclude --stringparam current-date $(date) $(xsldir)/tei2c5.xsl $< >$@; \
	  else \
	  $(XSLTPROCESSOR) $(xsldir)/tei2c5.xsl $< \$$current-date=$(date) >$@; fi

$(dictname)-reverse.c5: $(dictname).tei $(xsldir)/tei2c5-reverse.xsl
	@if [ "$(firstword $(XSLTPROCESSOR))" == "xsltproc" ]; then \
	  $(XSLTPROCESSOR) --stringparam current-date $(date) $(xsldir)/tei2c5-reverse.xsl $< >$@; \
	  else \
	  $(XSLTPROCESSOR) $(xsldir)/tei2c5-reverse.xsl $< \$$current-date=$(date) >$@; fi

reverse: $(dictname)-reverse.c5

%.dict %.index: %.c5 query-dictd
	dictfmt --without-time -t --headword-separator %%% $(DICTFMTFLAGS) $* <$<

$(FREEDICTDIR)/release/dict-tgz/freedict-$(dictname)-$(version).tar.gz: \
	$(dictname).dict.dz $(dictname).index
	tar -C .. -cvzf $@ $(addprefix $(notdir $(realpath .))/, $^)

release-dict-tgz: dirs \
	$(FREEDICTDIR)/release/dict-tgz/freedict-$(dictname)-$(version).tar.gz

$(FREEDICTDIR)/release/dict-tbz2/freedict-$(dictname)-$(version).tar.bz2: \
	$(dictname).dict.dz $(dictname).index
	tar -C .. -cvjf $@ $(addprefix $(notdir $(realpath .))/, $^)

release-dict-tbz2: dirs \
	$(FREEDICTDIR)/release/dict-tbz2/freedict-$(dictname)-$(version).tar.bz2

$(FREEDICTDIR)/release/dict-tbz2/freedict-$(dictname)-$(version)-reverse.tar.bz2: \
	$(dictname)-reverse.dict.dz $(dictname)-reverse.index
	tar -C .. -cvjf $@ $(addprefix $(notdir $(realpath .))/, $^)

release-dict-tbz2-reverse: dirs \
	$(FREEDICTDIR)/release/dict-tbz2/freedict-$(dictname)-$(version)-reverse.tar.bz2

######################################
#### targets for evolutionary platform
######################################

date=$(shell date +%G-%m-%d)

######################
#### not used by me :)
######################

install: $(dictname).dict.dz $(dictname).index
	install -d $(DESTDIR)
	install -m 644 $^ $(DESTDIR)
	$(DICTD_RESTART_SCRIPT)

uninstall:
	-rm $(DESTDIR)/$(dictname).dict.dz $(DESTDIR)/$(dictname).index
	$(DICTD_RESTART_SCRIPT)

########################
#### maintenance targets
########################

valid.stamp: $(dictname).tei
	xmllint --noout --relaxng freedict-P5.rng $<
	# way 1
	@test -e $(XMLSOC) || (echo "Please set path to xml.soc file!"; exit 1)
	#export SP_ENCODING=XML; \
	#export SP_CHARSET_FIXED=YES; \
	#export SGML_CATALOG_FILES="$(XMLSOC):$(SGML_CATALOG_FILES)"; \
	#$(NSGMLS) -wxml -s -E 10 $(XMLDECLARATION) $(dictname).tei
	#echo "If this file is newer than $(dictname).tei, that is valid XML." >$@
	echo "File is valid TEI XML."

validation: valid.stamp

testresult-$(version).log: $(dictname).index $(dictname).dict
	$(toolsdir)/testing/test-database.pl -f $(dictname) -l $(DICTD_LOCALE) |tee $@ \
	&& exit $${PIPESTATUS[0]}

test: testresult-$(version).log

testresult-$(version)-reverse.log: $(rdictname).index $(rdictname).dict
	$(toolsdir)/testing/test-database.pl -f $(rdictname) -l $(DICTD_LOCALE) |tee $@ \
	&& exit $${PIPESTATUS[0]}

test-reverse: testresult-$(version)-reverse.log
	
test-oldstyle: $(dictname).oldstyle.index $(dictname).oldstyle.dict.dz
	$(toolsdir)/testing/test-database.pl -f $(dictname).oldstyle \
 -l $(DICTD_LOCALE) |tee testresult-$(version)-oldstyle.log

test-reverse-oldstyle: $(rdictname).oldstyle.index $(rdictname).oldstyle.dict
	$(toolsdir)/testing/test-database.pl -f $(rdictname).oldstyle \
 -l $(DICTD_LOCALE) |tee testresult-$(version)-oldstyle-reverse.log

tests: valid.stamp testresult-$(version).log

dbupdate: $(dictname).dict $(dictname).index
	extractdata.pl -vfd $(dictname)

# Query platform support status
# This yields an exit status of
# 0 for dict supported on this platform
# 1 for dict unsupported on this platform
# 2 for unknown platform
query-%:
	@if [ -z "$(findstring $*,$(available_platforms))" ]; then \
	  echo "Unknown platform: $*"; exit 2; fi
	@if [ -n "$(findstring $*,$(UNSUPPORTED_PLATFORMS))" ]; then \
	  echo "Platform $* does not support this dictionary module."; exit 1; fi
	@echo "Platform $* supports this dictionary module."

print-unsupported:
	@echo -n $(UNSUPPORTED_PLATFORMS)

# this is a "double colon rule"
# adding another "clean::" rule in your Makefile
# allows to extend this with additional commands
#
# for example:
#
# clean::
#	-rm -f delete_this_file.too
clean::
	rm -f $(dictname).index $(dictname).dict
	rm -f $(dictname).c5 $(dictname).dict.dz testresult-*.log
	rm -f $(dictname)-reverse.c5 $(dictname)-reverse.dict.dz
	rm -f $(dictname)-reverse.index
	rm -f valid.stamp
	rm -f $(FREEDICTDIR)/release/dict-tbz2/freedict-$(dictname)-$(version).tar.bz2
	rm -f $(FREEDICTDIR)/release/dict-tgz/$(dictname)-$(version).tar.gz
	rm -f $(FREEDICTDIR)/release/src/freedict-$(dictname)-$(version).src.tar.bz2
	rm -f $(FREEDICTDIR)/release/src/freedict-$(dictname)-$(version).src.zip
	rm -f $(FREEDICTDIR)/release/tei/$(dictname)-$(version)-tei.tar.bz2

# put all sources of a dictionary module into a tarball for release
# ("distribution").  this only includes the .tei file if it doesn't have to be
# generated from other sources
$(FREEDICTDIR)/release/src/freedict-$(dictname)-$(version).src.tar.bz2: $(DISTFILES)
	@if [ ! -d $(FREEDICTDIR)/release/src ]; then \
		mkdir -p $(FREEDICTDIR)/release/src; fi
	tar -C .. -cvjhf $@ \
		--exclude=.svn --exclude=freedict-*.tar.bz2 --exclude=freedict-*.zip --exclude=.* \
		$(addprefix $(notdir $(realpath .))/, $(DISTFILES))

$(FREEDICTDIR)/release/src/freedict-$(dictname)-$(version).src.zip: $(DISTFILES)
	cd .. && zip -r9 $(subst ../,,$@) $(addprefix $(dictname)/, $(DISTFILES)) \
      -x \*/.svn/\* $(dictname)/freedict-*.tar.bz2 $(dictname)/freedict-*.zip $(dictname)/.* 

dist: $(FREEDICTDIR)/release/src/freedict-$(dictname)-$(version).src.tar.bz2 $(FREEDICTDIR)/release/src/freedict-$(dictname)-$(version).src.zip

# the following two targets work like "dist", but include the .tei file
# unconditionally
$(FREEDICTDIR)/release/tei/$(dictname)-$(version)-tei.tar.bz2: $(DISTFILES) $(dictname).tei
	@if [ ! -d $(FREEDICTDIR)/release/tei ]; then \
		mkdir -p $(FREEDICTDIR)/release/tei; fi
	if (echo "$(DISTFILES)" | grep "$(dictname).tei " > /dev/null); then \
		tar -C .. -cvjhf $@ \
			--exclude=.svn --exclude=freedict-*.tar.bz2 --exclude=.* \
			$(addprefix $(notdir $(realpath .))/, $(DISTFILES)); \
	else \
		tar -C .. -cvjhf $@ \
			--exclude=.svn --exclude=freedict-*.tar.bz2 --exclude=.* \
			$(addprefix $(notdir $(realpath .))/, $(DISTFILES) $(dictname).tei); \
	fi

release-tei-tbz2: $(FREEDICTDIR)/release/tei/$(dictname)-$(version)-tei.tar.bz2

#############################
#### targets for rpm packages
#############################

release-rpm: freedict-$(dictname).spec dist
	@if [ ! -d $(FREEDICTDIR)/release/rpm ]; then \
		ln -s /usr/src/packages/RPMS/noarch \
		$(FREEDICTDIR)/release/rpm; fi
	@if [! -x /usr/src/packages/SOURCES/freedict-$(dictname)-$(version).src.tar.bz2 ]; then \
		ln -s $(FREEDICTDIR)/release/src/freedict-$(dictname)-$(version).src.tar.bz2 \
			/usr/src/packages/SOURCES; fi
	rpmbuild --target=noarch -ba freedict-$(dictname).spec

release-rpm-reverse:


############################################
#### targets for (z)bedic on zaurus platform
############################################
# For a broader view, read the FreeDict HOWTO. It takes these steps:
#  1a. apply `sort.xsl'
#  1b. apply `group-homographs-sorted.xsl'
#  1c. link to `tei-wrapper.xml'
#  2a. apply `tei2dic.xsl' to create a bedic format file with newlines
#  2b. convert to Unicode NFC using charlint.pl
#  2c. replace double newlines by NUL bytes and replace \\e by \e using perl
#  3. apply `xerox' that comes with libbedic to generate missing properties
#  4. apply `dictzip' to compress it
#  5. optionally execute dic2ipk.sh to create a Zaurus installation package

sorted.tei: $(dictname).tei $(xsldir)/sort.xsl
	$(XSLTPROCESSOR) $(xsldir)/sort.xsl $< >$@

grouped.tei: sorted.tei $(xsldir)/group-homographs-sorted.xsl
	$(XSLTPROCESSOR) $(xsldir)/group-homographs-sorted.xsl $< >$@

tei-wrapper.xml: $(xsldir)/tei-wrapper.xml
	ln -s $(xsldir)/tei-wrapper.xml

# optional
unwrapped.tei: grouped.tei tei-wrapper.xml
	xmllint --noent tei-wrapper.xml >unwrapped.tei

bedic-precedence: $(dictname).unxeroxed.dic
	@if [ -z "$(LA1locale)" ]; \
	then echo 'Please set LA1locale to the locale of the source language!'; \
	else echo "The output of this should be incorporated appropriately \
into \`tei2dic.xsl':"; \
	$(XEROX) --generate-char-precedence $(LA1locale) $<; fi

$(dictname).escaped.dic: tei-wrapper.xml grouped.tei $(xsldir)/tei2dic.xsl
	$(XSLTPROCESSOR) $(xsldir)/tei2dic.xsl $< >$@

# Charlint - A Character Normalization Tool
# http://www.w3.org/International/charlint/
#
# You may want to adapt this:
unicodedata = $(toolsdir)/UnicodeData.txt
#unicodedata = /usr/lib/perl5/5.8.1/unicore/UnicodeData.txt
#unicodedata = /usr/share/perl/5.8.8/unicore/UnicodeData.txt
#
$(toolsdir)/UnicodeData.txt:
	cd $(toolsdir) && wget ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt
#
charlint_url = http://dev.w3.org/cvsweb/~checkout~/charlint/charlint.pl?rev=1.27&content-type=text/plain&only_with_tag=HEAD
$(toolsdir)/charlint.pl::
	@if [ ! -x $@ ]; then \
	cd $(toolsdir) && wget -O $@ '$(charlint_url)' && chmod a+x $@; fi
#
$(CHARLINT_DATA): $(unicodedata)
	$(CHARLINT) -f $< -S $@ -d -D
#
$(CHARLINT):: $(CHARLINT_DATA)

# generate NFC (Canonical Decomposition followed by Canonical Composition)
$(dictname).normalized.dic: $(dictname).escaped.dic $(CHARLINT)
	$(CHARLINT) -s $(CHARLINT_DATA) <$< >$@

$(dictname).unxeroxed.dic: $(dictname).normalized.dic
	perl -pi -e 's/\\0/\x00/gm; s/\\e/\e/gm;' <$< >$@

# old style:
#%.unxeroxed.dic: %.tei
#	tei2dic.py $< $*.unxeroxed.dic

$(FREEDICTDIR)/release/dic/freedict-%-$(version).dic: %.unxeroxed.dic
	@if [ ! -d $(FREEDICTDIR)/release/dic ]; then \
		mkdir $(FREEDICTDIR)/release/dic; fi
	$(XEROX) $*.unxeroxed.dic $@

release-bedic: $(FREEDICTDIR)/release/dic/freedict-$(dictname)-$(version).dic.dz

# optional
$(FREEDICTDIR)/release/ipk/%.ipk: $(FREEDICTDIR)/release/dic/%.dic.dz
	@if [ ! -d $(FREEDICTDIR)/release/ipk ]; then \
		mkdir $(FREEDICTDIR)/release/ipk; fi
	cd $(FREEDICTDIR)/release/ipk && ln -s `dic2ipk.sh $<` $@

# optional
release-zaurus: $(FREEDICTDIR)/release/ipk/freedict-$(dictname)-$(version).ipk

clean::
	rm -f sorted.tei grouped.tei tei-wrapper.xml unwrapped.tei \
	$(dictname).escaped.dic $(dictname).normalized.dic $(dictname).unxeroxed.dic \
	$(FREEDICTDIR)/release/dic/freedict-$(dictname)-$(version).dic \
	$(FREEDICTDIR)/release/dic/freedict-$(dictname)-$(version).dic.dz

##################################
#### targets for StarDict platform
##################################

# This tool comes with stardict
DICTD2DIC ?= dictd2dic

# This is hardcoded into dictd2dic :(
stardict_prefix = dictd_www.dict.org_

# idxhead is required to preexist by dictd2dic. The reason is not documented.
$(dictname).idxhead:
	echo -n "" > $@

$(stardict_prefix)$(dictname).idx $(stardict_prefix)$(dictname).dict.dz \
	dictd2dic.out: $(dictname).index $(dictname).dict $(dictname).idxhead
	$(DICTD2DIC) $(dictname) >dictd2dic.out
	gzip -9 $(stardict_prefix)$(dictname).idx

# $(wordcount) and $(idxfilesize) are a target-specific variables
$(stardict_prefix)$(dictname).ifo: \
	wordcount=$(word 2, $(shell tail -n1 dictd2dic.out))

$(stardict_prefix)$(dictname).ifo: \
	idxfilesize=$(strip $(shell zcat $(stardict_prefix)$(dictname).idx | wc -c))

authorresp.out: $(dictname).tei $(xsldir)/getauthor.xsl
	$(XSLTPROCESSOR) $(xsldir)/getauthor.xsl $< >$@

title.out: $(dictname).tei $(xsldir)/gettitle.xsl
	$(XSLTPROCESSOR) $(xsldir)/gettitle.xsl $< >$@

sourceurl.out: $(dictname).tei $(xsldir)/getsourceurl.xsl
	$(XSLTPROCESSOR) $(xsldir)/getsourceurl.xsl $< >$@

$(stardict_prefix)$(dictname).ifo: $(stardict_prefix)$(dictname).idx \
	dictd2dic.out authorresp.out title.out sourceurl.out
	@echo "Generating $@..."
	@echo "StarDict's dict ifo file" > $@
	@echo "version=2.4.2" >> $@
	@echo "wordcount=$(wordcount)" >> $@
	@echo "idxfilesize=$(idxfilesize)" >> $@
	@echo "bookname=$(shell cat title.out)" >> $@
	@echo "author=$(shell sed -e "s/ <.*>//" <authorresp.out)" >> $@
	@echo "email=$(shell sed -e "s/.* <\(.*\)>/\1/" <authorresp.out)" >> $@
	@echo "website=$(shell cat sourceurl.out)" >> $@
	@echo "description=Converted to StarDict format by freedict.org" >> $@
	@echo "date=$(shell date +%G.%m.%d)" >> $@
	@echo "sametypesequence=m" >> $@
	@cat $@

stardict: $(stardict_prefix)$(dictname).ifo

$(FREEDICTDIR)/release/stardict/freedict-$(dictname)-$(version)-stardict.tar.bz2: \
       	$(stardict_prefix)$(dictname).ifo \
	$(stardict_prefix)$(dictname).dict.dz \
	$(stardict_prefix)$(dictname).idx.gz
	@if [ ! -d $(FREEDICTDIR)/release/stardict ]; then \
		mkdir $(FREEDICTDIR)/release/stardict; fi
	tar -C .. -cvjf \
	  $(FREEDICTDIR)/release/stardict/freedict-$(dictname)-$(version)-stardict.tar.bz2 \
	  $(addprefix $(notdir $(realpath .))/, $^)

release-stardict: \
	$(FREEDICTDIR)/release/stardict/freedict-$(dictname)-$(version)-stardict.tar.bz2

clean::
	rm -f $(dictname).idxhead $(stardict_prefix)$(dictname).idx.gz \
	$(stardict_prefix)$(dictname).dict.dz $(stardict_prefix)$(dictname).ifo \
	$(FREEDICTDIR)/release/stardict/freedict-$(dictname)-$(version)-stardict.tar.bz2 \
	dictd2dic.out authorresp.out title.out sourceurl.out

#####################
#### targets for ding
#####################

%.ding: %.tei $(xsldir)/tei2ding.xsl
	$(XSLTPROCESSOR) $(xsldir)/tei2ding.xsl $< >$@

clean::
	rm -f *.ding

#######################
#### Phonetics import
#######################

supported_phonetics ?= $(shell PATH="$(toolsdir):$(PATH)" teiaddphonetics -li)

la1 := $(shell export V=$(dictname); echo $${V:0:3})
#la2 := $(shell export V=$(dictname); echo $${V:4:3})

ifneq (,$(findstring $(la1),$(supported_phonetics)))

# TEIADDPHONETICS ?= -v
$(dictname).tei: $(dictname)-nophon.tei
	teiaddphonetics $(TEIADDPHONETICS) -i $< -ou $@ -mbrdico-path $(MBRDICO_PATH)

endif


#######################
#### Makefile-technical
#######################

# should be default, but is not for make-historic reasons
.DELETE_ON_ERROR:

.PHONY: all version status sourceURL maintainer dirs install uninstall reverse reverse-oldstyle \
	release-dict-tbz2-oldstyle release-dict-tbz2-reverse-oldstyle \
	release-dict-tgz-oldstyle release-dict-tgz-reverse-oldstyle \
	release-dict-tbz2 release-dict-tbz2-reverse \
	release-zaurus \
	release-rpm release-rpm-reverse release-rpm-freedict-tools \
	clean dist dbupdate validation query-% print-unsupported \
	test test-reverse test-oldstyle test-reverse-oldstyle tests \
	find-homographs pos-statistics \
	stardict release-stardict release-tei-tbz2

